server:
    port: 8080

resilience4j.retry:
    configs:
        default:
            maxAttempts: 3  # 최대 시도 회수
            waitDuration: 1000  # 각 시도마다 대기 시간 (ms)
            retryExceptions: # retryExceptions 에 지정된 예외는 재시도
                - com.example.inflearnresilience4jcircuitbreaker.exception.RetryException
            ignoreExceptions: # retryExceptions 에 지정되지 않은 예외는 ignoreExceptions 로 처리됨
                - com.example.inflearnresilience4jcircuitbreaker.exception.IgnoreException
    instances:
        simpleRetryConfig:
            baseConfig: default

resilience4j.circuitbreaker:
    configs:
        default:
            slidingWindowType: COUNT_BASED
            minimumNumberOfCalls: 7                                   # 최소 7번까지는 무조건 CLOSE 로 가정하고 호출한다.
            slidingWindowSize: 10                                     # (minimumNumberOfCalls 이후로는) 10개의 요청을 기준으로 판단한다.
            waitDurationInOpenState: 10s                              # OPEN 상태에서 HALF_OPEN 으로 가려면 얼마나 기다릴 것인가?

            failureRateThreshold: 40                                  # slidingWindowSize 중 몇 %가 recordException 이면 OPEN 으로 만들 것인가?

            slowCallDurationThreshold: 3000                           # 몇 ms 동안 요청이 처리되지 않으면 실패로 간주할 것인가?
            slowCallRateThreshold: 60                                 # slidingWindowSize 중 몇 %가 slowCall 이면 OPEN 으로 만들 것인가?

            permittedNumberOfCallsInHalfOpenState: 5                  # HALF_OPEN 상태에서 5번까지는 CLOSE 로 가기위해 호출한다.
            automaticTransitionFromOpenToHalfOpenEnabled: true        # OPEN 상태에서 자동으로 HALF_OPEN 으로 갈 것인가?

            eventConsumerBufferSize: 10                               # actuator 를 위한 이벤트 버퍼 사이즈

            recordExceptions:
                - com.example.inflearnresilience4jcircuitbreaker.exception.RecordException
            ignoreExceptions:
                - com.example.inflearnresilience4jcircuitbreaker.exception.IgnoreException
    instances:
        simpleCircuitBreakerConfig:
            baseConfig: default
